Задание 1. 

1.1 Найдите информацию о том, как в Ubuntu открыть порт 80,443. Укажите как.

	Для просмотра текущих правил iptables использую команду «sudo iptables -L»
	
		vlad@ubuntu-linux:~$ sudo iptables -L
	Chain INPUT (policy ACCEPT)
	target     prot opt source               destination         

	Chain FORWARD (policy ACCEPT)
	target     prot opt source               destination         

	Chain OUTPUT (policy ACCEPT)
	target     prot opt source               destination

	Здесь три цепочки «INPUT, FORWARD, OUTPUT», у всех цепочек политика по умолчанию ACCEPT. Это значит, что подключение ко всем портам разрешено.

	Чтобы не вызывать системных ошибок, нужно добавить правила, которые разрешат обмен данными между любыми портами на локальном интерфейсе lo: 
	
		vlad@ubuntu-linux:~$ sudo iptables -A INPUT -i lo -j ACCEPT
		vlad@ubuntu-linux:~$ sudo iptables -A OUTPUT -o lo -j ACCEPT

	Также надо добавить правила разрешающие все пакеты с состоянием ESTABLISHED и RELATED, то есть разрешать пакеты для открытых соединений,
	а для новых запрещать.

		vlad@ubuntu-linux:~$ sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

	Чтобы открыть порты 22, 80 и 443 для протокола TCP использую команды: 

		vlad@ubuntu-linux:~$ sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
		vlad@ubuntu-linux:~$ sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
		vlad@ubuntu-linux:~$ sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT

	Чтобы всё заработало, меняю политику по умолчанию на DROP: 

		vlad@ubuntu-linux:~$  sudo iptables -P INPUT DROP

	В итоге получается: 

		vlad@ubuntu-linux:~$ sudo iptables -L
	Chain INPUT (policy DROP)
	target     prot opt source               destination         
	ACCEPT     all  --  anywhere             anywhere            
	ACCEPT     all  --  anywhere             anywhere             state RELATED,ESTABLISHED
	ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh
	ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:http
	ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:https

	Chain FORWARD (policy ACCEPT)
	target     prot opt source               destination         

	Chain OUTPUT (policy ACCEPT)
	target     prot opt source               destination         
	ACCEPT     all  --  anywhere             anywhere            
		vlad@ubuntu-linux:~$ sudo iptables -nvL
	Chain INPUT (policy DROP 0 packets, 0 bytes)
 	pkts bytes target     prot opt in     out     source               destination         
    	0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           
  	378 25392 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
    	0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22
    	0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:80
    	0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:443

	Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
 	pkts bytes target     prot opt in     out     source               destination         

	Chain OUTPUT (policy ACCEPT 36 packets, 4328 bytes)
 	pkts bytes target     prot opt in     out     source               destination         
    	0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0



1.2 Установить nginx, сконфигурировать свой виртуальный хост, используя порт 80, так, чтобы:
		на запрос клиента с указанным и непустым хидером 'User'. отправлять код 200 с текстом "Hi $user!", где $user - это значение хидера 'User'.
		иначе отправлять код 404 с текстом "Page not found".
	
		Чтобы установить nginx использую команду «apt install nginx»

		Далее создаю файл «ubuntuHW.conf» 
	
		  root@ubuntu-linux:/home/vlad# vim /etc/nginx/conf.d/ubuntuHW.conf
		root@ubuntu-linux:/home/vlad# ln -s /etc/nginx/conf.d/ubuntuHW.conf /etc/nginx/sites-enabled/ubuntuHW

1.3 Мне прислать конфиг nginx и команду curl, которую выполняете.

		ubuntuHW.conf:
 
		server{
    		listen 80 default_server;
    		listen [::]:80 default_server;

    		root /var/www/html;

    		index index.html index.htm index.nginx-debian.html;

    		server_name 192.168.0.22 ubuntuHW localhost;

    		add_header User-detected $user_detected always;

    		set $user $http_user;

    		location / {
        		if ($user != ""){
            		set $user_detected "True";
            		return 200 "Hi, $user!\n";
       		 }
        		if ($user = "") {
            		set $user_detected "False";
            		return 404 "Page not found\n";
       		}
    		}
		}
	

	Команды curl: 

	vlad@ubuntu-linux:~$ curl -D - http://localhost -H 'User: Vlad'
	HTTP/1.1 200 OK
	Server: nginx/1.14.0 (Ubuntu)
	Date: Thu, 16 Apr 2020 09:42:12 GMT
	Content-Type: application/octet-stream
	Content-Length: 10
	Connection: keep-alive
	User-detected: True

	Hi, Vlad!

	vlad@ubuntu-linux:~$ curl -D - http://localhost -H 'Host: localhost'
	HTTP/1.1 404 Not Found
	Server: nginx/1.14.0 (Ubuntu)
	Date: Thu, 16 Apr 2020 09:43:17 GMT
	Content-Type: application/octet-stream
	Content-Length: 15
	Connection: keep-alive
	User-detected: False

	Page not found



Задание 2. 

2.1 Найти информацию о том, что такое самоподписанные сертификаты и сгенерировать такой для своего вэб сервера. Написать своими словами, что это 	 такое и как сгенерить.


	Самоподписанные сертификаты - это сертификаты, которые создаются и подписываются тем же лицом, которое эти сертификаты идентифицирует.
	Другими словами, если я сам для своего домена или IP-адреса создал SSL сертификат, он будет называться самоподписанным.

	Генерирую самоподписанный сертификат:

	vlad@ubuntu-linux:~$ openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.pem
	Can't load /home/vlad/.rnd into RNG
	140327506211264:error:2406F079:random number generator:RAND_load_file:Cannot open file:../crypto/rand/randfile.c:88:Filename=/home/vlad/.rnd
	You are about to be asked to enter information that will be incorporated
	into your certificate request.
	What you are about to enter is what is called a Distinguished Name or a DN.
	There are quite a few fields but you can leave some blank
	For some fields there will be a default value,
	If you enter '.', the field will be left blank.
	-----
	Country Name (2 letter code) [AU]:RU
	State or Province Name (full name) [Some-State]:Moscow
	Locality Name (eg, city) []:Moscow
	Organization Name (eg, company) [Internet Widgits Pty Ltd]:UbuntuHW            
	Organizational Unit Name (eg, section) []:GB
	Common Name (e.g. server FQDN or YOUR name) []:HomeWork
	Email Address []:.

	Получил два файла: 

	rootCA.key;
	rootCA.pem

	Создаю папку «ssl» в директории «nginx» и копирую туда полученные файлы:

	root@ubuntu-linux:/home/vlad# mkdir /etc/nginx/ssl
	root@ubuntu-linux:/home/vlad# cp rootCA* /etc/nginx/ssl/

2.2 Добавить SSL соединение для дефолтного виртуального хоста nginx, используя порт 443. Прикрепить конфиги nginx.

	root@ubuntu-linux:/home/vlad# cp /etc/nginx/sites-available/default /etc/nginx/sites-available/ssl
	root@ubuntu-linux:/home/vlad# ln -s /etc/nginx/sites-available/ssl /etc/nginx/sites-enabled/ssl
	root@ubuntu-linux:/home/vlad# vim /etc/nginx/sites-available/default

	server {
        listen 192.168.0.22:80 default_server;
        listen [::]:80 default_server;

        server_name ubuntuHW;

        return 301 https://$server_name;
	}

	server {
        # SSL configuration
        #
         listen 443 ssl default_server;
         listen [::]:443 ssl default_server;

        ssl_certificate         /etc/nginx/ssl/rootCA.pem;
        ssl_certificate_key     /etc/nginx/ssl/rootCA.key;

        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
         include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name ubuntuHW;

	location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

2.3 Откройте в браузере страницу хоста и посмотрите, как браузер реагирует на самоподписанные сертификаты. Напишите, что видите.

	Появляется предупреждение: «Warning: Potential Security Risk Ahead»

2.4 Мы говорили о необходимости шифровать симметрично. При этом проблем с получением ассиметричных сертификатов нет. Зачем такая сложная схема для установления SSL соединения? Почему бы не шифровать ассиметрично? Своими словами.

	Алгоритмы симметричного шифрования быстрее и требуют меньше вычислительной мощности, но их основным недостатком является распределение ключей. Поскольку один и тот же ключ используется для шифрования и дешифрования информации, этот ключ должен быть передан всем, кому потребуется доступ, что естественно создаёт определенные риски.

	Ассиметричное шифрование решает проблему распределения ключей, используя открытые ключи для шифрования, а приватные для дешифрования. Компромисс заключается в том, что ассиметричные системы очень медленны по сравнению с симметричными и требуют гораздо большей вычислительной мощности из-за длины ключа.



Информацию брал с сайтов:

	https://losst.ru/kak-otkryt-port-ubuntu
	https://www.emaro-ssl.ru/blog/self-signed-certificate/
	https://www.binance.vision/ru/security/symmetric-vs-asymmetric-encryption